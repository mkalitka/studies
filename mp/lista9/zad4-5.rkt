#lang racket

(define decoding
  (make-hash
   '(("._" . #\a)
   ("_..." . #\b)
   ("_._." . #\c)
   ("_.." . #\d)
   ("." . #\e)
   (".._." . #\f)
   ("__." . #\g)
   ("...." . #\h)
   (".." . #\i)
   (".___" . #\j)
   ("_._" . #\k)
   ("._.." . #\l)
   ("__" . #\m)
   ("_." . #\n)
   ("___" . #\o)
   (".__." . #\p)
   ("__._" . #\q)
   ("._." . #\r)
   ("..." . #\s)
   ("_" . #\t)
   (".._" . #\u)
   ("..._" . #\v)
   (".__" . #\w)
   ("_.._" . #\x)
   ("_.__" . #\y)
   ("__.." . #\z)
   ("_____" . #\0)
   (".____" . #\1)
   ("..___" . #\2)
   ("...__" . #\3)
   ("...._" . #\4)
   ("....." . #\5)
   ("_...." . #\6)
   ("__..." . #\7)
   ("___.." . #\8)
   ("____." . #\9))))


(define (morse-decode input)
  (string-join (map morse-decode-word (regexp-split #rx"  " input)) " "))

(define (morse-decode-word input)
  (list->string
   (map (lambda (x) (hash-ref decoding x))
        (string-split input))))

(define coding
  (make-hash
   '((#\a . "._")
    (#\b . "_...")
    (#\c . "_._.")
    (#\d . "_..")
    (#\e . ".")
    (#\f . ".._.")
    (#\g . "__.")
    (#\h . "....")
    (#\i . "..")
    (#\j . ".___")
    (#\k . "_._")
    (#\l . "._..")
    (#\m . "__")
    (#\n . "_.")
    (#\o . "___")
    (#\p . ".__.")
    (#\q . "__._")
    (#\r . "._.")
    (#\s . "...")
    (#\t . "_")
    (#\u . ".._")
    (#\v . "..._")
    (#\w . ".__")
    (#\x . "_.._")
    (#\y . "_.__")
    (#\z . "__..")
    (#\0 . "_____")
    (#\1 . ".____")
    (#\2 . "..___")
    (#\3 . "...__")
    (#\4 . "...._")
    (#\5 . ".....")
    (#\6 . "_....")
    (#\7 . "__...")
    (#\8 . "___..")
    (#\9 . "____."))))


(define (morse-code input)
  (string-join (map morse-code-word (string-split (string-downcase input))) "  "))

(define (morse-code-word input)
  (string-join
   (map (lambda (x) (hash-ref coding x))
        (string->list input))))

(morse-code "kocham paroweczki")
(morse-decode "_._ ___ _._. .... ._ __  .__. ._ ._. ___ .__ . _._. __.. _._ ..")